import os
import nest_asyncio
import asyncio
import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)

nest_asyncio.apply()
load_dotenv()
token = os.getenv("token")
if not token:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞! –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")

# üéØ –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
TARGET_GROUP_IDS = [-1002631818202]

# üóÇ –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö "–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" —Å–æ–æ–±—â–µ–Ω–∏–π
LAST_TOPUP = {}  # chat_id -> (text, timestamp)


# üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg or not msg.text:
        return

    text = msg.text.strip()
    lowered = text.lower()
    chat_id = msg.chat_id
    now = datetime.datetime.now()

    # üî¥ 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ "–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    if "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ mbank —á–µ—Ä–µ–∑" in lowered and "–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" in lowered:
        LAST_TOPUP[chat_id] = (text, now)

        for group_id in TARGET_GROUP_IDS:
            try:
                await context.bot.send_message(chat_id=group_id, text=text)
                print(f"‚úÖ –°–±–æ–π –ø–µ—Ä–µ—Å–ª–∞–Ω –≤ {group_id}: {text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {group_id}: {e}")
        return

    # üü¢ 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" –∏–ª–∏ "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ"
    if "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" in lowered or "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ" in lowered:
        if chat_id in LAST_TOPUP:
            prev_text, prev_time = LAST_TOPUP.pop(chat_id)

            # –£–±–∏—Ä–∞–µ–º "–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            prefix = prev_text.split("–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")[0].strip()
            restored = f"{prefix} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

            for group_id in TARGET_GROUP_IDS:
                try:
                    await context.bot.send_message(chat_id=group_id, text=restored)
                    print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {group_id}: {restored}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ {group_id}: {e}")
            return

    # üü° 3. –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    KEYWORDS = ['–≤—Ä–µ–º–µ–Ω–Ω–æ', '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ']
    if any(k in lowered for k in KEYWORDS):
        for group_id in TARGET_GROUP_IDS:
            try:
                await context.bot.forward_message(
                    chat_id=group_id,
                    from_chat_id=msg.chat_id,
                    message_id=msg.message_id
                )
                print(f"üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º –≤ {group_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")


# üìå –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥ ID —á–∞—Ç–∞
async def print_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    print(f"üìå Chat ID: {chat.id}")


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(token).build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(MessageHandler(filters.ALL, print_chat_id))  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await app.run_polling()


if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(main())
