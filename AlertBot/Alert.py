import os
import nest_asyncio
from dotenv import load_dotenv

nest_asyncio.apply()

import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)

# üß† –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
KEYWORDS = ['–≤—Ä–µ–º–µ–Ω–Ω–æ', '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ']

# üéØ –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã
DBO_CC = []
TARGET_GROUP_IDS = [-1002631818202]
INC_UAT = [-1002631818202]
#INC_UAC = [-1002631818202]


# üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg or not msg.text:
        return

    text = msg.text.lower()

    if any(keyword in text for keyword in KEYWORDS):
        for group_id in TARGET_GROUP_IDS:
            try:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—Ç
                if msg.reply_to_message:
                    # –ü–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
                    await context.bot.forward_message(
                        chat_id=group_id,
                        from_chat_id=msg.chat_id,
                        message_id=msg.reply_to_message.message_id
                    )
                    # –ü–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç
                    await context.bot.forward_message(
                        chat_id=group_id,
                        from_chat_id=msg.chat_id,
                        message_id=msg.message_id
                    )
                    print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω –æ—Ç–≤–µ—Ç + –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ {group_id} ")
                else:
                    # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.forward_message(
                        chat_id=group_id,
                        from_chat_id=msg.chat_id,
                        message_id=msg.message_id
                    )
                    print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {group_id}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {group_id}: {e}")


# üëÜ –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞ (—Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏)
async def print_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    print(f"üìå Chat ID: {chat.id}")


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(token).build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")
    await app.run_polling()

    # üëá –≤ main(), –ø–µ—Ä–µ–¥ app.run_polling()
    app.add_handler(MessageHandler(filters.ALL, print_chat_id))


if __name__ == '__main__':
    load_dotenv()
    token = os.getenv("token")
    if not token:
        raise ValueError("–û—à–∏–±–∫–∞! –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
    asyncio.get_event_loop().run_until_complete(main())
