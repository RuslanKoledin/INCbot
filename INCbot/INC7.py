import datetime
import asyncio
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from zoneinfo import ZoneInfo
import os

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)

scheduler = BackgroundScheduler(timezone=ZoneInfo("Asia/Bishkek"))
scheduler.start()

incidents = {}
event_loop = None

def extract_key(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∏—â–µ—Ç —Å—Ç—Ä–æ–∫—É —Å '–ò–Ω—Ü–∏–¥–µ–Ω—Ç:' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å."""
    match = re.search(r'–ò–Ω—Ü–∏–¥–µ–Ω—Ç:\s*(.+?)(\n|$)', text)
    return match.group(1).strip() if match else None

def get_incident_key(text: str, chat_id: int) -> str | None:
    """–ò—â–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ chat_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –∏–ª–∏ None."""
    for key, value in incidents.items():
        if value["chat_id"] == chat_id and value["text"] in text:
            return key
    return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id
    reply_to = update.message.reply_to_message

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} –≤ —á–∞—Ç–µ {chat_id}")

    # --- –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ ---
    if reply_to and any(word in text.lower() for word in ["–∑–∞—Ä–∞–±–æ—Ç–∞–ª", "—É—Å—Ç—Ä–∞–Ω–µ–Ω–æ", "—Ä–µ—à–µ–Ω–æ"]):
        replied_text = reply_to.text
        key = extract_key(replied_text)
        if not key:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.")
            return
        incident_id = f"{chat_id}_{key}"
        incident = incidents.get(incident_id)
        if incident:
            print(f"üîï –ò–Ω—Ü–∏–¥–µ–Ω—Ç '{key}' –∑–∞–∫—Ä—ã—Ç. –û—Ç–º–µ–Ω—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            for job_id in incident.get("jobs", []):
                try:
                    scheduler.remove_job(job_id)
                except Exception:
                    pass
            del incidents[incident_id]
        else:
            print(f"‚ö†Ô∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ ---
    if "–ò–Ω—Ü–∏–¥–µ–Ω—Ç:" in text and "–í—Ä–µ–º—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:" in text:
        key = extract_key(text)
        if not key:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á –∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.")
            return

        now = datetime.datetime.now(tz=ZoneInfo("Asia/Bishkek"))
        incident_id = f"{chat_id}_{key}"
        incidents[incident_id] = {
            "text": text,
            "chat_id": chat_id,
            "time": now,
            "jobs": [],
        }

        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {incident_id}")

        # –†–∞—Å—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –≥—Ä—É–ø–ø—ã
        for group_id in [-1002591060921, -1002631818202]:
            await context.bot.send_message(chat_id=group_id, text=text)

        # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –°—Ä–µ–¥–Ω–∏–π/–ù–∏–∑–∫–∏–π ‚Äî —Å—Ç–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if ("–°—Ä–µ–¥–Ω–∏–π" not in text) and ("–ù–∏–∑–∫–∏–π" not in text):
            job_50 = scheduler.add_job(
                notify_50_minutes,
                trigger='date',
                run_date=now + datetime.timedelta(seconds=30),
                args=[context.application, chat_id, incident_id],
                id=f"{incident_id}_50"
            )
            job_60 = scheduler.add_job(
                notify_60_minutes,
                trigger='date',
                run_date=now + datetime.timedelta(seconds=60),
                args=[context.application, chat_id, incident_id],
                id=f"{incident_id}_60"
            )
            incidents[incident_id]["jobs"].extend([job_50.id, job_60.id])
        else:
            print("‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–µ –≤—ã—Å–æ–∫–∏–π ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Å—Ç–∞–≤–∏–º.")

    # --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ---
    elif "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ–¥–Ω—è—Ç –¥–æ" in text or "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ" in text:
        if reply_to:
            replied_text = reply_to.text
            incident_id = get_incident_key(replied_text, chat_id)
            if not incident_id or incident_id not in incidents:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç.")
                return

            incident = incidents[incident_id]

            # –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            if "–ø–æ–¥–Ω—è—Ç –¥–æ" in text and ("–í—ã—Å–æ–∫–∏–π" in text or "–ù–∞–∏–≤—ã—Å—à–∏–π" in text):
                print(f"üîº –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident_id} –ø–æ–≤—ã—à–µ–Ω.")
                if not incident["jobs"]:
                    now = datetime.datetime.now(tz=ZoneInfo("Asia/Bishkek"))
                    job_50 = scheduler.add_job(
                        notify_50_minutes,
                        trigger='date',
                        run_date=now + datetime.timedelta(seconds=10),
                        args=[context.application, chat_id, incident_id],
                        id=f"{incident_id}_50"
                    )
                    job_60 = scheduler.add_job(
                        notify_60_minutes,
                        trigger='date',
                        run_date=now + datetime.timedelta(seconds=25),
                        args=[context.application, chat_id, incident_id],
                        id=f"{incident_id}_60"
                    )
                    incident["jobs"].extend([job_50.id, job_60.id])
                    print("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")

            # –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            elif "–ø–æ–Ω–∏–∂–µ–Ω –¥–æ" in text and ("–°—Ä–µ–¥–Ω–∏–π" in text or "–ù–∏–∑–∫–∏–π" in text):
                print(f"üîΩ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident_id} –ø–æ–Ω–∏–∂–µ–Ω. –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                for job_id in incident["jobs"]:
                    try:
                        scheduler.remove_job(job_id)
                    except Exception:
                        pass
                incident["jobs"] = []
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç.")

    else:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç.")

def notify_50_minutes(application, chat_id, incident_id):
    global event_loop
    if incident_id not in incidents:
        print(f"‚è±Ô∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç (50 –º–∏–Ω).")
        return
    print(f"‚è∞ 50 –º–∏–Ω—É—Ç –∏—Å—Ç–µ–∫–ª–∏ –¥–ª—è {incident_id}")
    asyncio.run_coroutine_threadsafe(
        application.bot.send_message(
            chat_id=chat_id,
            text="–° –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ 50 –º–∏–Ω—É—Ç, —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞–¥–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å. @PR @"
        ),
        event_loop
    )

def notify_60_minutes(application, chat_id, incident_id):
    global event_loop
    if incident_id not in incidents:
        print(f"‚è±Ô∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç (60 –º–∏–Ω).")
        return
    print(f"‚è∞ 60 –º–∏–Ω—É—Ç –∏—Å—Ç–µ–∫–ª–∏ –¥–ª—è {incident_id}")
    asyncio.run_coroutine_threadsafe(
        application.bot.send_message(
            chat_id=chat_id,
            text="–û–ø–æ–≤–µ—Å—Ç–∏—Ç–µ! @PR @Ruslank1111!!"
        ),
        event_loop
    )

if __name__ == '__main__':
    application = ApplicationBuilder().token("7846221293:AAHsoCzRSvQQocIreb9dWWd2kc2gjgF93tQ").build()
    event_loop = asyncio.get_event_loop()
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    asyncio.run(application.run_polling())
