import datetime
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from zoneinfo import ZoneInfo

scheduler = BackgroundScheduler(timezone=ZoneInfo("Asia/Bishkek"))
scheduler.start()

incidents = {}

def get_incident_key(text: str, chat_id: int) -> str:
    for key, value in incidents.items():
        if value["chat_id"] == chat_id and value["text"] in text:
            return key
    return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} –≤ —á–∞—Ç–µ {chat_id}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    if "–ò–Ω—Ü–∏–¥–µ–Ω—Ç:" in text and "–í—Ä–µ–º—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:" in text:
        now = datetime.datetime.now(tz=ZoneInfo("Asia/Bishkek"))
        incident_key = f"{chat_id}_{now.timestamp()}"
        incidents[incident_key] = {
            "text": text,
            "chat_id": chat_id,
            "time": now,
            "jobs": []
        }

        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {incident_key}")

        for group_id in [-1002591060921, -1002631818202]:
            await context.bot.send_message(chat_id=group_id, text=text)

        if ("–°—Ä–µ–¥–Ω–∏–π" not in text) and ("–ù–∏–∑–∫–∏–π" not in text):
            job50 = scheduler.add_job(
                notify_50_minutes,
                trigger='date',
                run_date=now + datetime.timedelta(seconds=30),  # 30 —Å–µ–∫—É–Ω–¥
                args=[context.application, chat_id, incident_key]
            )
            job60 = scheduler.add_job(
                notify_60_minutes,
                trigger='date',
                run_date=now + datetime.timedelta(seconds=60),  # 60 —Å–µ–∫—É–Ω–¥ (1 –º–∏–Ω—É—Ç–∞)
                args=[context.application, chat_id, incident_key]
            )
            incidents[incident_key]["jobs"] = [job50.id, job60.id]
        else:
            print("–°—Ä–µ–¥–Ω–∏–π/–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Å—Ç–∞–≤–∏–º.")

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    elif "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ–¥–Ω—è—Ç –¥–æ" in text or "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ" in text:
        if update.message.reply_to_message:
            replied_text = update.message.reply_to_message.text
            incident_key = get_incident_key(replied_text, chat_id)
            if not incident_key or incident_key not in incidents:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç.")
                return

            incident = incidents[incident_key]

            if "–ø–æ–¥–Ω—è—Ç –¥–æ" in text and ("–í—ã—Å–æ–∫–∏–π" in text or "–ù–∞–∏–≤—ã—Å—à–∏–π" in text):
                print(f"üîº –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident_key} –ø–æ–≤—ã—à–µ–Ω.")
                if not incident["jobs"]:
                    now = datetime.datetime.now(tz=ZoneInfo("Asia/Bishkek"))
                    # –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 30 –∏ 60 —Å–µ–∫—É–Ω–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    job50 = scheduler.add_job(
                        notify_50_minutes,
                        trigger='date',
                        run_date=now + datetime.timedelta(seconds=30),
                        args=[context.application, chat_id, incident_key]
                    )
                    job60 = scheduler.add_job(
                        notify_60_minutes,
                        trigger='date',
                        run_date=now + datetime.timedelta(seconds=60),
                        args=[context.application, chat_id, incident_key]
                    )
                    incident["jobs"] = [job50.id, job60.id]
                    print("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")

            elif "–ø–æ–Ω–∏–∂–µ–Ω –¥–æ" in text and ("–°—Ä–µ–¥–Ω–∏–π" in text or "–ù–∏–∑–∫–∏–π" in text):
                print(f"üîΩ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident_key} –ø–æ–Ω–∏–∂–µ–Ω. –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                for job_id in incident["jobs"]:
                    scheduler.remove_job(job_id)
                incident["jobs"] = []
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç.")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Å–ª–æ–≤—É "–∑–∞—Ä–∞–±–æ—Ç–∞–ª")
    elif "–∑–∞—Ä–∞–±–æ—Ç–∞–ª" in text.lower():
        if update.message.reply_to_message:
            replied_text = update.message.reply_to_message.text
            incident_key = get_incident_key(replied_text, chat_id)
            if incident_key and incident_key in incidents:
                print(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_key} –∑–∞–∫—Ä—ã—Ç ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                for job_id in incidents[incident_key]["jobs"]:
                    scheduler.remove_job(job_id)
                incidents[incident_key]["jobs"] = []

def notify_50_minutes(application, chat_id, incident_key):
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    if incident_key in incidents and incidents[incident_key]["jobs"]:
        asyncio.run_coroutine_threadsafe(
            application.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ—à–ª–æ 50 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞. –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω—É–∂–Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å. @PR @"
            ),
            loop
        )

def notify_60_minutes(application, chat_id, incident_key):
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    if incident_key in incidents and incidents[incident_key]["jobs"]:
        asyncio.run_coroutine_threadsafe(
            application.bot.send_message(
                chat_id=chat_id,
                text="–û–ø–æ–≤–µ—Å—Ç–∏—Ç–µ! @PR @Ruslank1111!!"
            ),
            loop
        )

if __name__ == '__main__':
    application = ApplicationBuilder().token("7846221293:AAHsoCzRSvQQocIreb9dWWd2kc2gjgF93tQ").build()
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    application.run_polling()
