import nest_asyncio
nest_asyncio.apply()

import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)


# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '8152393673:AAHAk_1pHe0RJFT3syRv32WIm5cMZYX--MM'
#7846221293:AAHsoCzRSvQQocIreb9dWWd2kc2gjgF93tQ
# üß† –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
KEYWORDS = ['–≤—Ä–µ–º–µ–Ω–Ω–æ', '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ']

# üéØ –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã –∏ —Ç–µ–º—ã
TARGETS = [
    {"group_id": -1002195114285, "thread_id": 6512},
    # –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]

# üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg or not msg.text:
        return

    text = msg.text.lower()

    if any(keyword in text for keyword in KEYWORDS):
        for target in TARGETS:
            group_id = target["group_id"]
            thread_id = target["thread_id"]

            try:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—Ç
                if msg.reply_to_message:
                    # 1. –ü–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
                    await context.bot.forward_message(
                        chat_id=group_id,
                        from_chat_id=msg.chat_id,
                        message_id=msg.reply_to_message.message_id,
                        message_thread_id=thread_id
                    )
                    # 2. –ü–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç
                    await context.bot.forward_message(
                        chat_id=group_id,
                        from_chat_id=msg.chat_id,
                        message_id=msg.message_id,
                        message_thread_id=thread_id
                    )
                    print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω –æ—Ç–≤–µ—Ç + –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ {group_id}/{thread_id}")
                else:
                    # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.forward_message(
                        chat_id=group_id,
                        from_chat_id=msg.chat_id,
                        message_id=msg.message_id,
                        message_thread_id=thread_id
                    )
                    print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {group_id}/{thread_id}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {group_id}: {e}")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")
    await app.run_polling()

if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(main())
