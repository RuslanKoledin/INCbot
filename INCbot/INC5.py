import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from zoneinfo import ZoneInfo
import asyncio
import re

import os

os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)

scheduler = BackgroundScheduler(timezone=ZoneInfo("Asia/Bishkek"))
scheduler.start()

incidents = {}
event_loop = None

def extract_key(text):
    match = re.search(r'–ò–Ω—Ü–∏–¥–µ–Ω—Ç:\s*(.+?)\n', text)
    return match.group(1).strip() if match else None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id
    reply_to = update.message.reply_to_message

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} –≤ —á–∞—Ç–µ {chat_id}")

    # üü† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    if reply_to and any(x in text.lower() for x in ["–∑–∞—Ä–∞–±–æ—Ç–∞–ª", "—É—Å—Ç—Ä–∞–Ω–µ–Ω–æ", "—Ä–µ—à–µ–Ω–æ"]):
        replied_text = reply_to.text
        key = extract_key(replied_text)
        if not key:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.")
            return

        incident_id = f"{chat_id}_{key}"
        incident = incidents.get(incident_id)

        if incident:
            print(f"üîï –ò–Ω—Ü–∏–¥–µ–Ω—Ç '{key}' –∑–∞–∫—Ä—ã—Ç. –û—Ç–º–µ–Ω—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            for job_id in incident.get("jobs", []):
                scheduler.remove_job(job_id)
            del incidents[incident_id]
        else:
            print(f"‚ö†Ô∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # üü¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    if "–ò–Ω—Ü–∏–¥–µ–Ω—Ç:" in text and "–í—Ä–µ–º—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:" in text:
        key = extract_key(text)
        if not key:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á –∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.")
            return

        now = datetime.datetime.now(tz=ZoneInfo("Asia/Bishkek"))
        incident_id = f"{chat_id}_{key}"
        incidents[incident_id] = {
            "text": text,
            "chat_id": chat_id,
            "time": now,
            "jobs": [],
        }

        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {incident_id}")

        for group_id in [-1002591060921, -1002631818202]:
            await context.bot.send_message(chat_id=group_id, text=text)

        if ("–°—Ä–µ–¥–Ω–∏–π" not in text) and ("–ù–∏–∑–∫–∏–π" not in text):
            job_50 = scheduler.add_job(
                notify_50_minutes,
                trigger='date',
                run_date=now + datetime.timedelta(seconds=30),
                args=[context.application, chat_id, incident_id],
                id=f"{incident_id}_50"
            )
            job_60 = scheduler.add_job(
                notify_60_minutes,
                trigger='date',
                run_date=now + datetime.timedelta(minutes=1),
                args=[context.application, chat_id, incident_id],
                id=f"{incident_id}_60"
            )
            incidents[incident_id]["jobs"].extend([job_50.id, job_60.id])
        else:
            print("‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–µ –≤—ã—Å–æ–∫–∏–π ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Å—Ç–∞–≤–∏–º.")
    else:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç.")

def notify_50_minutes(application, chat_id, incident_id):
    global event_loop
    if incident_id not in incidents:
        print(f"‚è±Ô∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç –¥–æ 50 –º–∏–Ω—É—Ç.")
        return
    print(f"‚è∞ 50 –º–∏–Ω—É—Ç –∏—Å—Ç–µ–∫–ª–∏ –¥–ª—è {incident_id}")
    asyncio.run_coroutine_threadsafe(
        application.bot.send_message(
            chat_id=chat_id,
            text="–° –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ 50 –º–∏–Ω—É—Ç, —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞–¥–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å. @PR @"
        ),
        event_loop
    )

def notify_60_minutes(application, chat_id, incident_id):
    global event_loop
    if incident_id not in incidents:
        print(f"‚è±Ô∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç –¥–æ 60 –º–∏–Ω—É—Ç.")
        return
    print(f"‚è∞ 60 –º–∏–Ω—É—Ç –∏—Å—Ç–µ–∫–ª–∏ –¥–ª—è {incident_id}")
    asyncio.run_coroutine_threadsafe(
        application.bot.send_message(
            chat_id=chat_id,
            text="–û–ø–æ–≤–µ—Å—Ç–∏—Ç–µ! @PR @Ruslank1111!!"
        ),
        event_loop
    )

if __name__ == '__main__':
    application = ApplicationBuilder().token("7846221293:AAHsoCzRSvQQocIreb9dWWd2kc2gjgF93tQ").build()
    event_loop = asyncio.get_event_loop()
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    asyncio.run(application.run_polling())
