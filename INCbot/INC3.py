import datetime
import asyncio
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from zoneinfo import ZoneInfo

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π –ë–∏—à–∫–µ–∫
scheduler = BackgroundScheduler(timezone=ZoneInfo("Asia/Bishkek"))
scheduler.start()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
incidents = {}
event_loop = None

def extract_incident_key(text: str) -> str:
    match = re.search(r'–ò–Ω—Ü–∏–¥–µ–Ω—Ç:([^\n\r]+)', text)
    return match.group(1).strip() if match else None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id
    now = datetime.datetime.now(tz=ZoneInfo("Asia/Bishkek"))
    incident_key = extract_incident_key(text)

    if not incident_key:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.")
        return

    incident_id = f"{chat_id}_{incident_key}"

    if "–ò–Ω—Ü–∏–¥–µ–Ω—Ç:" in text and "–í—Ä–µ–º—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:" in text:
        print(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {incident_key}")
        priority = "–í—ã—Å–æ–∫–∏–π" if "–í—ã—Å–æ–∫–∏–π" in text else "–ù–∞–∏–≤—ã—Å—à–∏–π" if "–ù–∞–∏–≤—ã—Å—à–∏–π" in text else "–°—Ä–µ–¥–Ω–∏–π"
        incidents[incident_id] = {
            "text": text,
            "chat_id": chat_id,
            "incident_key": incident_key,
            "time": now,
            "priority": priority,
            "jobs": []
        }

        # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
        for group_id in [-1002591060921, -1002631818202]:
            await context.bot.send_message(chat_id=group_id, text=text)

        if priority in ["–í—ã—Å–æ–∫–∏–π", "–ù–∞–∏–≤—ã—Å—à–∏–π"]:
            j1 = scheduler.add_job(notify_50_minutes, 'date', run_date=now + datetime.timedelta(seconds=10),
                                   args=[context.application, chat_id, incident_id])
            j2 = scheduler.add_job(notify_60_minutes, 'date', run_date=now + datetime.timedelta(seconds=20),
                                   args=[context.application, chat_id, incident_id])
            incidents[incident_id]["jobs"] = [j1.id, j2.id]

    elif "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ–¥–Ω—è—Ç –¥–æ" in text and incident_id in incidents:
        inc = incidents[incident_id]
        if inc["priority"] in ["–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"]:
            inc["priority"] = "–í—ã—Å–æ–∫–∏–π"
            j1 = scheduler.add_job(notify_50_minutes, 'date', run_date=inc["time"] + datetime.timedelta(minutes=50),
                                   args=[context.application, chat_id, incident_id])
            j2 = scheduler.add_job(notify_60_minutes, 'date', run_date=inc["time"] + datetime.timedelta(minutes=60),
                                   args=[context.application, chat_id, incident_id])
            inc["jobs"] = [j1.id, j2.id]
            print(f"üî∫ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–¥–Ω—è—Ç, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç {inc['time']}")

    elif "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ" in text and incident_id in incidents:
        inc = incidents[incident_id]
        if inc["priority"] == "–í—ã—Å–æ–∫–∏–π":
            inc["priority"] = "–°—Ä–µ–¥–Ω–∏–π"
            for job_id in inc["jobs"]:
                try:
                    scheduler.remove_job(job_id)
                except:
                    pass
            inc["jobs"] = []
            print("üîª –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–Ω–∏–∂–µ–Ω, –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")

def notify_50_minutes(application, chat_id, incident_id):
    global event_loop
    if event_loop:
        asyncio.run_coroutine_threadsafe(
            application.bot.send_message(
                chat_id=chat_id,
                text="–° –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ 50 –º–∏–Ω—É—Ç, —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞–¥–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å. @PR @"
            ),
            event_loop
        )

def notify_60_minutes(application, chat_id, incident_id):
    global event_loop
    if event_loop:
        asyncio.run_coroutine_threadsafe(
            application.bot.send_message(
                chat_id=chat_id,
                text="–û–ø–æ–≤–µ—Å—Ç–∏—Ç–µ! @PR @Ruslank1111!!"
            ),
            event_loop
        )

if __name__ == '__main__':
    application = ApplicationBuilder().token("7846221293:AAHsoCzRSvQQocIreb9dWWd2kc2gjgF93tQ").build()

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ event loop
    try:
        event_loop = asyncio.get_running_loop()
    except RuntimeError:
        event_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(event_loop)

    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    asyncio.run(application.run_polling())
